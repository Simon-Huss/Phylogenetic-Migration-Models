include("../utils/load.jl")

#=
    File to analyze the result file generated by low_dim_results.jl.
=#

filepath = "Result/Files/low_dim_results_flights_master.csv"
data = DataFrame(CSV.File(filepath))
embedding_dims = [Integer(x) for x in parse_result(data.DIMS[1])]

println()
println("PIQ KL-div forward ", mean(data.PIQ_KL_FORWARD_DIVS), " var ", var(data.PIQ_KL_FORWARD_DIVS))

mds_kl_divs = read_result(data.MDS_KL_FORWARD_DIVS)
for (index, embedding_dim) in enumerate(embedding_dims)
    println("MDS KL-div forward dim=", embedding_dim, " : mean ",  mean(mds_kl_divs[index]), " var ", var(mds_kl_divs[index]))
end
landmark_kl_divs = read_result(data.LANDMARK_KL_FORWARD_DIVS)
for (index, embedding_dim) in enumerate(embedding_dims)
    println("Landmark KL-div forward dim=", embedding_dim, " : mean ",  mean(landmark_kl_divs[index]), " var ", var(landmark_kl_divs[index]))
end

println()
println("PIQ KL-div backward mean ", mean(data.PIQ_KL_BACKWARD_DIVS), " var ", var(data.PIQ_KL_BACKWARD_DIVS))
mds_kl_divs_backward = read_result(data.MDS_KL_BACKWARD_DIVS)
for (index, embedding_dim) in enumerate(embedding_dims)
    println("MDS KL-div backward dim=", embedding_dim, " :  mean ",  mean(mds_kl_divs_backward[index]), " var ", var(mds_kl_divs_backward[index]))
end
landmark_kl_divs_backward = read_result(data.LANDMARK_KL_BACKWARD_DIVS)
for (index, embedding_dim) in enumerate(embedding_dims)
    println("Landmark KL-div backward dim=", embedding_dim, " : mean ",  mean(landmark_kl_divs_backward[index]), " var ", var(landmark_kl_divs_backward[index]))
end
println()

println("Real Q root prob mean ", mean(data.REAL_Q_ROOT_PROB_OF_START_INDICES), " var ", var(data.REAL_Q_ROOT_PROB_OF_START_INDICES), " median ", median(data.REAL_Q_ROOT_PROB_OF_START_INDICES))
println("PIQ root prob mean ", mean(data.PIQ_ROOT_PROB_OF_START_INDICES), " var ", var(data.PIQ_ROOT_PROB_OF_START_INDICES), " median ", median(data.PIQ_ROOT_PROB_OF_START_INDICES))
mds_root_probs = read_result(data.MDS_ROOT_PROB_OF_START_INDICES)
for (index, embedding_dim) in enumerate(embedding_dims)
    println("MDS root prob dim=", embedding_dim, " : mean ",  mean(mds_root_probs[index]), " var ", var(mds_root_probs[index]), " median ", median(mds_root_probs[index]))
end
landmark_root_probs = read_result(data.LANDMARK_ROOT_PROB_OF_START_INDICES)
for (index, embedding_dim) in enumerate(embedding_dims)
    println("Landmark root prob dim=", embedding_dim, " : mean ",  mean(landmark_root_probs[index]), " var ", var(landmark_root_probs[index]), " median ", median(landmark_root_probs[index]))
end
println()
println("Total migrations: mean ", mean(data.TOTAL_MIGRATIONS), " var ", var(data.TOTAL_MIGRATIONS))
println("Average migrations: mean ", mean(data.AVERAGE_MIGRATIONS), " var ", var(data.AVERAGE_MIGRATIONS))
println("Minimum migrations: mean ", mean(data.MINIMUM_MIGRATIONS), " var ", var(data.MINIMUM_MIGRATIONS))
println("Total branchlength: mean ", mean(data.TOTAL_BRANCHLENGTHS), " var ", var(data.TOTAL_BRANCHLENGTHS))
println("Minimum migration over all runs:", minimum(data.TOTAL_MIGRATIONS), " - maximum: ", maximum(data.TOTAL_MIGRATIONS))
println()


# Kullback Leibler divergence plots
plts = []

ylimits = (0, 37)
text_size = 15
offset = 30

models = ["Dim: " * string(x) for x in embedding_dims]
push!(models, "PiQ")
mds_kl_forward_divs = read_result(data.MDS_KL_FORWARD_DIVS)
mds_kl_forward_boxplot = boxplot(title="Forward KL divergence MDS", legendfontsize=text_size, xtickfontsize=text_size, xrotation=offset, ytickfontsize=text_size, titlefontsize=text_size)
for i=1:length(embedding_dims)
    boxplot!([models[i]], [mds_kl_forward_divs[i]], legend=false, outliers=false, ylims=ylimits)
    dotplot!([models[i]], [mds_kl_forward_divs[i]], legend=false, alpha=0.75, markersize=2, ylims=ylimits)
end
boxplot!([models[6]], [data.PIQ_KL_FORWARD_DIVS], legend=false, outliers=false, ylims=ylimits)
dotplot!([models[6]], [data.PIQ_KL_FORWARD_DIVS], legend=false, alpha=0.75, markersize=2, ylims=ylimits)
push!(plts, mds_kl_forward_boxplot)


models = ["Dim: " * string(x) for x in embedding_dims]
push!(models, "PiQ")
landmark_kl_forward_divs = read_result(data.LANDMARK_KL_FORWARD_DIVS)
landmark_kl_forward_boxplot = boxplot(title="Forward KL divergence Landmark", legendfontsize=text_size, xtickfontsize=text_size, xrotation=offset, ytickfontsize=text_size, titlefontsize=text_size)
for i=1:length(embedding_dims)
    boxplot!([models[i]], [landmark_kl_forward_divs[i]], legend=false, outliers=false, ylims=ylimits, xtickfontsize=text_size)
    dotplot!([models[i]], [landmark_kl_forward_divs[i]], legend=false, alpha=0.75, markersize=2, ylims=ylimits, xtickfontsize=text_size)
end
boxplot!([models[6]], [data.PIQ_KL_FORWARD_DIVS], legend=false, outliers=false, ylims=ylimits, xtickfontsize=text_size)
dotplot!([models[6]], [data.PIQ_KL_FORWARD_DIVS], legend=false, alpha=0.75, markersize=2, ylims=ylimits, xtickfontsize=text_size)
push!(plts, landmark_kl_forward_boxplot)


models = ["Dim: " * string(x) for x in embedding_dims]
push!(models, "PiQ")
mds_kl_backward_divs = read_result(data.MDS_KL_BACKWARD_DIVS)
mds_kl_backward_boxplot = boxplot(title="Backward KL divergence MDS", legendfontsize=text_size, xtickfontsize=text_size, xrotation=offset, ytickfontsize=text_size, titlefontsize=text_size)
for i=1:length(embedding_dims)
    boxplot!([models[i]], [mds_kl_backward_divs[i]], legend=false, outliers=false, ylims=ylimits)
    dotplot!([models[i]], [mds_kl_backward_divs[i]], legend=false, alpha=0.75, markersize=2, ylims=ylimits)
end
boxplot!([models[6]], [data.PIQ_KL_BACKWARD_DIVS], legend=false, outliers=false, ylims=ylimits)
dotplot!([models[6]], [data.PIQ_KL_BACKWARD_DIVS], legend=false, alpha=0.75, markersize=2, ylims=ylimits)
push!(plts, mds_kl_backward_boxplot)


models = ["Dim: " * string(x) for x in embedding_dims]
push!(models, "PiQ")
landmark_kl_backward_divs = read_result(data.LANDMARK_KL_BACKWARD_DIVS)
landmark_kl_backward_boxplot = boxplot(title="Backward KL divergence landmark", legendfontsize=text_size, xtickfontsize=text_size, xrotation=offset, ytickfontsize=text_size, titlefontsize=text_size)
for i=1:length(embedding_dims)
    boxplot!([models[i]], [landmark_kl_backward_divs[i]], legend=false, outliers=false, ylims=ylimits)
    dotplot!([models[i]], [landmark_kl_backward_divs[i]], legend=false, alpha=0.75, markersize=2, ylims=ylimits)
end
boxplot!([models[6]], [data.PIQ_KL_BACKWARD_DIVS], legend=false, outliers=false, ylims=ylimits)
dotplot!([models[6]], [data.PIQ_KL_BACKWARD_DIVS], legend=false, alpha=0.75, markersize=2, ylims=ylimits)
push!(plts, landmark_kl_backward_boxplot)
boxplotfig_div = Plots.plot(plts..., layout=(2, 2), size=(1000, 1000), dpi=500, legendfontsize=text_size, xtickfontsize=text_size, xrotation=offset, ytickfontsize=text_size, titlefontsize=text_size)
display(boxplotfig_div)
#savefig(boxplotfig_div,"boxplot_lowdim_div_flights_100.png")




# Root probability plots
plts = []

models = ["Dim: " * string(x) for x in embedding_dims]
root_probs = read_result(data.MDS_ROOT_PROB_OF_START_INDICES)
root_probs_boxplot_mds = boxplot(title="Root probabilities MDS", legendfontsize=text_size, xtickfontsize=text_size, xrotation=offset, ytickfontsize=text_size, titlefontsize=text_size)
for i = 1:length(embedding_dims)
    boxplot!([models[i]], [root_probs[i]], legend=false, outliers=false)
    dotplot!([models[i]], [root_probs[i]], legend=false, alpha=0.75, markersize=2)
end
push!(plts, root_probs_boxplot_mds)

models = ["Dim: " * string(x) for x in embedding_dims]
root_probs = read_result(data.LANDMARK_ROOT_PROB_OF_START_INDICES)
root_probs_boxplot_landmark = boxplot(title="Root probabilities Landmark", legendfontsize=text_size, xtickfontsize=text_size, xrotation=offset, ytickfontsize=text_size, titlefontsize=text_size)
for i = 1:length(embedding_dims)
    boxplot!([models[i]], [root_probs[i]], legend=false, outliers=false)
    dotplot!([models[i]], [root_probs[i]], legend=false, alpha=0.75, markersize=2)
end
push!(plts, root_probs_boxplot_landmark)


models = ["PIQ", "Real_Q"]
root_probs = [data.PIQ_ROOT_PROB_OF_START_INDICES, data.REAL_Q_ROOT_PROB_OF_START_INDICES]
root_probs_boxplot = boxplot(title="Root probabilities", legendfontsize=text_size, xtickfontsize=text_size, xrotation=offset, ytickfontsize=text_size, titlefontsize=text_size)
for i=1:2
    boxplot!([models[i]], [root_probs[i]], legend=false, outliers=false)
    dotplot!([models[i]], [root_probs[i]], legend=false, alpha=0.75, markersize=2)
end
push!(plts, root_probs_boxplot)


boxplotfig_probs = Plots.plot(plts..., layout=(1, 3), size=(1400, 700), dpi=500, legendfontsize=text_size, xtickfontsize=text_size, xrotation=offset, ytickfontsize=text_size, titlefontsize=text_size)

display(boxplotfig_probs)
#savefig(boxplotfig_probs,"boxplot_lowdim_root_probs_no_flights_100.png")
