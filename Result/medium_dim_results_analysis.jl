include("../utils/load.jl")

#=
    File to analyze the result file generated by medium_dim_results.jl.
=#

filepath = "Result/Files/medium_dim_results_master.csv"

data = DataFrame(CSV.File(filepath))
data_dims = replace(data.DIMS[1], " " => ", ")
embedding_dims = [Integer(x) for x in parse_result(data_dims)]

println("PIQ root prob mean ", mean(data.PIQ_ROOT_PROB_OF_START_INDICES), " var ", var(data.PIQ_ROOT_PROB_OF_START_INDICES), " median ", median(data.PIQ_ROOT_PROB_OF_START_INDICES))
mds_root_probs = read_result(data.MDS_ROOT_PROB_OF_START_INDICES)
for (index, embedding_dim) in enumerate(embedding_dims)
    println("MDS root prob dim=", embedding_dim, " : mean ",  mean(mds_root_probs[index]), " var ", var(mds_root_probs[index]), " median ", median(mds_root_probs[index]))
end
landmark_root_probs = read_result(data.LANDMARK_ROOT_PROB_OF_START_INDICES)
for (index, embedding_dim) in enumerate(embedding_dims)
    println("Landmark root prob dim=", embedding_dim, " : mean ",  mean(landmark_root_probs[index]), " var ", var(landmark_root_probs[index]), " median ", median(landmark_root_probs[index]))
end
println()
println("Total migrations: mean ", mean(data.TOTAL_MIGRATIONS), " var ", var(data.TOTAL_MIGRATIONS))
println("Average migrations: mean ", mean(data.AVERAGE_MIGRATIONS), " var ", var(data.AVERAGE_MIGRATIONS))
println("Minimum migrations: mean ", mean(data.MINIMUM_MIGRATIONS), " var ", var(data.MINIMUM_MIGRATIONS))
println("Total branchlength: mean ", mean(data.TOTAL_BRANCHLENGTHS), " var ", var(data.TOTAL_BRANCHLENGTHS))
println("Minimum migration over all runs:", minimum(data.TOTAL_MIGRATIONS), " - maximum: ", maximum(data.TOTAL_MIGRATIONS))
println()

plts = []
ylimits = (0, 1.01)

models = ["Dim: " * string(x) for x in embedding_dims]
mds = false
plot_title = ""
if mds
    global root_probs = read_result(data.MDS_ROOT_PROB_OF_START_INDICES)
    global plot_title = "Root probabilities MDS"
    global root_probs_boxplot = boxplot(title=plot_title, ylims=ylimits)
else
    global root_probs = read_result(data.LANDMARK_ROOT_PROB_OF_START_INDICES)
    global plot_title = "Root probabilities landmark"
    global root_probs_boxplot = boxplot(title=plot_title, ylims=ylimits)
end

for i = 1:length(embedding_dims)
    boxplot!([models[i]], [root_probs[i]], legend=false, outliers=false, ylims=ylimits)
    dotplot!([models[i]], [root_probs[i]], legend=false, alpha=0.75, markersize=2, ylims=ylimits)
end
boxplot!(["PiQ"], [data.PIQ_ROOT_PROB_OF_START_INDICES], legend=false, outliers=false, ylims=ylimits)
dotplot!(["PiQ"], [data.PIQ_ROOT_PROB_OF_START_INDICES], legend=false, alpha=0.75, markersize=2, ylims=ylimits)
push!(plts, root_probs_boxplot)

ylimits = (0, 0.055)

root_probs_boxplot = boxplot(title=plot_title, ylims=ylimits)
for i = 1:length(embedding_dims)
    boxplot!([models[i]], [root_probs[i]], legend=false, outliers=false, ylims=ylimits)
    dotplot!([models[i]], [root_probs[i]], legend=false, alpha=0.75, markersize=2, ylims=ylimits)
end
boxplot!(["PiQ"], [data.PIQ_ROOT_PROB_OF_START_INDICES], legend=false, outliers=false, ylims=ylimits)
dotplot!(["PiQ"], [data.PIQ_ROOT_PROB_OF_START_INDICES], legend=false, alpha=0.75, markersize=2, ylims=ylimits)
push!(plts, root_probs_boxplot)

boxplot
boxplotfig_probs = Plots.plot(plts..., layout=(1, 2), size=(1000, 700), dpi=200)
display(boxplotfig_probs)

figname = "boxplot_mediumdim_root_probs"
if mds
    global figname *= "_mds"
else
    global figname *= "_landmark"
end
if contains(filepath, "flights")
    global figname *= "_flights"
end
figname *= ".png"
#savefig(boxplotfig_probs, figname)
